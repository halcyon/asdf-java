#!/usr/bin/env bash

# this is global for error reporting
ASDF_JAVA_ERROR=""

log() {
	# set colors unless ASDF_JAVA_PLAIN is set
	[[ -z $ASDF_JAVA_PLAIN ]] && tput setab $1 && tput setaf 0

	echo -n "░asdf java $2░"

	# set colors unless ASDF_JAVA_PLAIN is set
	[[ -z $ASDF_JAVA_PLAIN ]] && tput sgr0 && tput setaf $1
	echo " ${@:3}"

	# unset colors
	tput sgr0
}

log_info() {
	log 2 ':)' "$@"
}

log_warning() {
	log 3 ':o' "$@"
}

log_error() {
	log 1 ':(' "$@"
}

# Download the java source from Oracle or OpenJDK, copy files and cleanup.
install_java() {
	local versionstr=$1
	local destdir=$2

	IFS=- read -r distro version <<< "${versionstr}"

	local variant=$(get_variant $distro)
	[[ -z "$ASDF_JAVA_ERROR" ]] || return

	# Perform all operations is a temporary directory that will be
	# automatically cleaned up on exit (success or failure).
	local wrkdir
	wrkdir=$(mktemp -dt asdf-java.XXXXXX)
	# shellcheck disable=SC2064
	trap "cd ${PWD}; rm -rf ${wrkdir}" EXIT
	cd "${wrkdir}"

	get_java "${distro}" "${version}" "${variant}"
	[[ -z "$ASDF_JAVA_ERROR" ]] || return

	unpack_java $variant $destdir
	[[ -z "$ASDF_JAVA_ERROR" ]] || return
}

# Get the "variant" piece of the Oracle url.
get_variant() {
	local distro=$1
	case "$(uname -s)" in
		Linux)
			case "$(uname -m)" in
				x86_64)
					case $distro in
						oracle) echo linux-x64.tar.gz ;;
						openjdk) echo linux-x64_bin.tar.gz ;;
                                                zulu) echo linux_x64.tar.gz;;
						*) ;;
					esac ;;
				i[[3-9]]86)
					case $distro in
						oracle) echo linux-i586.tar.gz ;;
						openjdk) echo linux-i586_bin.tar.gz ;;
                                                zulu) echo linux_i686.tar.gz ;;
						*) ;;
					esac ;;
				*) ASDF_JAVA_ERROR="$(uname -m) is not supported on linux" ;;
			esac ;;
		Darwin)
			case "$(uname -m)" in
				x86_64)
					case $distro in
						oracle) echo macosx-x64.dmg ;;
						openjdk) echo osx-x64_bin.tar.gz ;;
                                                zulu) echo macosx_x64.zip ;;
						*) ;;
					esac ;;
				*) ASDF_JAVA_ERROR="$(uname -m) is not supported on MacOS" ;;
			esac ;;
		*) ASDF_JAVA_ERROR="$(uname -s) is not supported" ;;
	esac
}

get_current_variant() {
	local variant=$1

	if [[ "$variant" == *"mac"* ]]; then
		variant=$(echo $variant | sed -e 's|mac||')
	fi

	if [[ "$variant" == *"tar"* ]]; then
		echo $variant | sed -e 's|.tar|_bin.tar|'
	elif [[ "$variant" == *"dmg"* ]]; then
		echo $variant | sed -e 's|.dmg|_bin.dmg|'
	fi
}

get_base_url() {
	local distro=$1
	case $distro in
		oracle) echo "http://download.oracle.com/otn-pub/java/jdk/" ;;
		openjdk) echo "https://download.java.net/java/GA/jdk" ;;
                zulu) echo "https://cdn.azul.com/zulu/bin" ;;
		*) ;;
	esac
}

# Download java from Oracle.
get_java() {
	local distro=$1
	local version=$2
	local variant=$3

	local base=$(get_base_url $distro)
	local oracle8_version=$(echo $version | sed -e 's|\.|u|g')

	case $distro-$version in
                oracle-8.141)  url=$base$oracle8_version-b15/336fa29ff2bb4ef291e347e091f7f4a7/jdk-$oracle8_version-$variant ;;
		oracle-8.131)  url=$base$oracle8_version-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-$oracle8_version-$variant ;;

		openjdk-11.0.1) url=${base}11/13/GPL/openjdk-11.0.1_$variant ;;
		openjdk-11)     url=${base/\/GA\//\/ga\/}11/openjdk-11_$variant ;;
		openjdk-10.0.2) url=$base'10'/$version/19aef61b38124481863b1413dce1855f/13/openjdk-$version'_'$variant ;;

                zulu-7.0.222) url=$base/zulu7.29.0.5-ca-jdk7.0.222-$variant ;;
                zulu-8.0.212) url=$base/zulu8.38.0.13-ca-jdk8.0.212-$variant ;;
                zulu-11.0.3)  url=$base/zulu11.31.11-ca-jdk11.0.3-$variant ;;
                zulu-12.0.1)  url=$base/zulu12.2.3-ca-jdk12.0.1-$variant ;;

		*) ASDF_JAVA_ERROR="$version is not a supported version" ;;
	esac
	[[ -z "$ASDF_JAVA_ERROR" ]] || return

	log_info downloading $url

	curl -fLC - \
		--progress-bar \
		--retry 3 --retry-delay 3 \
		-b oraclelicense=accept-securebackup-cookie \
		-o ./$variant $url

	[[ $? != 0 ]] && ASDF_JAVA_ERROR="downloading java dist"
}

# Unpacks all kinds of sources.
unpack_java() {
	local variant=$1
	local destdir=$2

	log_info expanding java dist

	mkdir -p "${destdir}"
	case $variant in
		*.tar.gz) unpack_tar $variant $destdir ;;
		*.dmg)    unpack_dmg $variant $destdir ;;
                *.zip)    unpack_zip $variant $destdir ;;
		*) ASDF_JAVA_ERROR="$variant is not supported" ;;
	esac
}

# Unarchive a tar archive into the install directory and cleanup.
#
# TODO: Should be sanitized with error reporting.
unpack_tar() {
	local archive=$1
	local destdir=$2

	tar -xzf "${archive}" \
		|| { ASDF_JAVA_ERROR="expanding java dist"; return; }

	local jdk_dir
	jdk_dir=$(echo ./*jdk*)
	if [[ -d ${jdk_dir}/Contents/Home ]]; then
		jdk_dir="${jdk_dir}/Contents/Home"
	fi
	mv "${jdk_dir}"/* "${destdir}/"
}

# Unarchive a tar archive into the install directory and cleanup.
#
# TODO: Should be sanitized with error reporting.
unpack_dmg() {
	local image=$1
	local destdir=$2

	local pkgdir=./asdf_tmp_pkgdir
	local imgdir=./asdf_tmp_imgdir

	mount_dmg $imgdir $image
	[[ -z "$ASDF_JAVA_ERROR" ]] || return

    if pkgutil --expand $imgdir/*.pkg $pkgdir; then
        if gzip -dc < ${pkgdir}/jdk*.pkg/Payload | cpio -i \
                && [[ -d Contents ]]; then
            mv Contents/Home/* $destdir/
        else
            ASDF_JAVA_ERROR="demangling dist payload"
        fi
    else
        ASDF_JAVA_ERROR="expanding java dist"
    fi

    unmount_dmg "${imgdir}"
}

mount_dmg() {
	local dir=$1
	local dev=$2

	hdiutil mount -quiet -mountpoint $dir $dev
	[[ $? == 0 ]] || ASDF_JAVA_ERROR="mounting java dist"
}

unmount_dmg() {
	local dir=$1

	hdiutil unmount -quiet $dir
	if [[ $? != 0 ]]; then
		[[ -z "$ASDF_JAVA_ERROR" ]] || \
			ASDF_JAVA_ERROR="unmounting java dist"

		log_warning "The java dist is still mounted at $dir."
		log_warning " Use hdiutil unmount to unmount it."
	fi
}

unpack_zip() {
	local variant=$1
	local destdir=$2

	local origin=$(pwd)
	(
		cd $destdir
		unzip $variant
		[[ $? == 0 ]] || ASDF_JAVA_ERROR="expanding java dist"
		rm $variant

		local pkg=$(echo * | grep jdk)
		mv $pkg/* .
		rmdir $pkg
	)
}

#
# MAIN
#
install_java "$ASDF_INSTALL_VERSION" "$ASDF_INSTALL_PATH"

if [[ -z "$ASDF_JAVA_ERROR" ]]; then
	log_info "$ASDF_INSTALL_VERSION was installed successfully"
else
	log_error "asdf java failed. $ASDF_JAVA_ERROR"
fi

unset ASDF_JAVA_ERROR
